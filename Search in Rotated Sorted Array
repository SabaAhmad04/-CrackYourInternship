    int FindPivotIndex(vector<int>&nums)
    {
        int s=0;
        int e=nums.size()-1;
        while(s<=e)
        {
            int mid=s+(e-s)/2;
            if(s==e)
            {
                return s;
            }
            else if(mid+1<nums.size() && nums[mid]>nums[mid+1])
            {
                return mid;
            }
            else if(mid-1>=0 && nums[mid]<nums[mid-1])
            {
                return mid-1;
            }
            else if(nums[mid]<nums[s])
            {
                e=mid-1;
            }
            else
            {
                s=mid+1;
            }
        }
        return -1;
    }
    int BSearch(vector<int>&nums, int target, int s, int e)
    {
         while(s<=e)
         {
            int mid=s+(e-s)/2;
            if(nums[mid]==target)
            {
                return mid;
            }
            else if(nums[mid]>target)
            {
                e=mid-1;
            }
            else
            {
                s=mid+1;
            }
         }
         return -1;
    }
    int search(vector<int>& nums, int target) {
       int pivot=FindPivotIndex(nums);
       int ans=0;
       if(target>=nums[0])
       {
          ans=BSearch(nums,target,0,pivot);
       }
       else 
       {
        ans=BSearch(nums,target,pivot+1,nums.size()-1);
       }
       return ans; 
    }
